# 참고: https://velog.io/@axiom0510/b19539

# 무조건 한 번에 3을 뿌려야 하므로, 나무 높이의 총합은 3의 배수여야 함
# 2의 개수와 1의 개수가 같아야 함
# 1은 2를 쪼개면 만들 수 있음
# 2의 개수가 1의 개수보다 크다면, 2를 쪼개서 둘의 개수를 같게 만들 수 있음
# 따라서, 먼저 둘의 개수가 같아지는 수를 찾고(전체/3),
# (목표 배치를 만드는 데 걸리는 일수 = 나무 높이의 총합 // 3)
# 각 사과나무에 2를 뿌릴 수 있는 일수를 계산,
# (전체/3)보다 2를 뿌릴 수 있는 일수가 크다면, 목표 높이 만들 수 있음

n = int(input())    # 나무의 수
target = map(int, input().split())    # 만들어야 할 나무의 높이 리스트

total = 0    # 전체 나무 높이의 합
cnt = 0    # 2를 뿌릴 수 있는 일수
for t in target:
    total += t
    cnt += t // 2

# 조건 확인
print("YES" if total % 3 == 0 and cnt >= total // 3 else "NO")